{
  "name": "Gamma PowerPoint Export Automation",
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "gamma-export-webhook",
        "responseMode": "responseNode",
        "options": {}
      },
      "id": "webhook-1",
      "name": "Gamma Export Trigger",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [240, 300],
      "webhookId": "gamma-powerpoint-export"
    },
    {
      "parameters": {
        "functionCode": "// Validate incoming export request\nconst content = $input.first().json;\n\n// Required fields validation\nconst requiredFields = ['gammaUrl', 'exportFormat', 'userEmail'];\nconst missingFields = requiredFields.filter(field => !content[field]);\n\nif (missingFields.length > 0) {\n  return [{\n    json: {\n      error: 'Missing required fields',\n      missingFields: missingFields,\n      status: 'validation_failed'\n    }\n  }];\n}\n\n// Export format validation\nif (content.exportFormat !== 'pptx') {\n  return [{\n    json: {\n      error: 'Unsupported export format',\n      supportedFormats: ['pptx'],\n      status: 'validation_failed'\n    }\n  }];\n}\n\n// Initialize export session\nconst exportSession = {\n  sessionId: `session_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,\n  gammaUrl: content.gammaUrl,\n  exportFormat: content.exportFormat,\n  userEmail: content.userEmail,\n  timestamp: new Date().toISOString(),\n  status: 'validated',\n  qualityScore: 0,\n  issues: []\n};\n\nreturn [{\n  json: exportSession\n}];"
      },
      "id": "code-1",
      "name": "Validate Export Request",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [460, 300]
    },
    {
      "parameters": {
        "functionCode": "// Pre-export quality analysis\nconst session = $input.first().json;\n\n// Simulate content analysis (in real implementation, this would fetch Gamma content)\nconst qualityAnalysis = {\n  aspectRatio: { score: 10, status: 'optimal', feedback: '16:9 widescreen detected' },\n  fonts: { score: 8, status: 'good', feedback: 'Standard fonts detected, minor optimizations possible' },\n  layout: { score: 9, status: 'excellent', feedback: 'Simple, PowerPoint-friendly layout' },\n  images: { score: 7, status: 'acceptable', feedback: 'High-resolution images detected' },\n  colors: { score: 8, status: 'good', feedback: 'Good contrast ratios' },\n  margins: { score: 9, status: 'excellent', feedback: 'Content within standard boundaries' }\n};\n\n// Calculate total quality score\nconst totalScore = Object.values(qualityAnalysis).reduce((sum, item) => sum + item.score, 0);\nconst maxScore = Object.keys(qualityAnalysis).length * 10;\nconst qualityPercentage = (totalScore / maxScore) * 100;\n\n// Identify optimization opportunities\nconst optimizations = [];\nObject.entries(qualityAnalysis).forEach(([key, analysis]) => {\n  if (analysis.score < 10) {\n    optimizations.push({\n      category: key,\n      currentScore: analysis.score,\n      potentialImprovement: 10 - analysis.score,\n      recommendation: analysis.feedback\n    });\n  }\n});\n\nreturn [{\n  json: {\n    ...session,\n    qualityAnalysis,\n    totalScore,\n    maxScore,\n    qualityPercentage,\n    optimizations,\n    status: 'analyzed'\n  }\n}];"
      },
      "id": "code-2",
      "name": "Quality Analysis",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [680, 300]
    },
    {
      "parameters": {
        "url": "https://developers.gamma.app/api/v1/generate",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth",
        "requestMethod": "POST",
        "postBody": {
          "inputText": "={{$json.optimizedContent || $json.originalContent}}",
          "format": "presentation",
          "themeName": "={{$json.themeName || 'minimal'}}",
          "numCards": "={{$json.numCards || 10}}",
          "exportFormat": "pptx",
          "textMode": "preserve",
          "imageOptions": {
            "model": "dall-e-3",
            "style": "professional"
          },
          "sharingOptions": {
            "externalAccess": "noAccess"
          }
        },
        "options": {
          "timeout": 300000
        }
      },
      "id": "http-1",
      "name": "Generate PowerPoint via API",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 3,
      "position": [900, 300]
    },
    {
      "parameters": {
        "functionCode": "// Process API response and handle quality checks\nconst response = $input.first().json;\nconst session = $input.first().json.session || {};\n\nif (response.error) {\n  return [{\n    json: {\n      ...session,\n      error: response.error,\n      status: 'api_failed',\n      timestamp: new Date().toISOString()\n    }\n  }];\n}\n\n// Generate download URL (simulated - in real implementation, this would come from API)\nconst downloadUrl = response.downloadUrl || `https://gamma.app/export/${response.id}.pptx`;\nconst fileId = response.id || `file_${Date.now()}`;\n\n// Estimate processing time based on content complexity\nconst estimatedTime = Math.max(30, Math.min(300, session.totalScore * 2)); // 30s to 5min\n\nreturn [{\n  json: {\n    ...session,\n    apiResponse: response,\n    downloadUrl,\n    fileId,\n    estimatedProcessingTime: estimatedTime,\n    status: 'processing',\n    processingStarted: new Date().toISOString()\n  }\n}];"
      },
      "id": "code-3",
      "name": "Process API Response",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [1120, 300]
    },
    {
      "parameters": {
        "url": "={{$json.downloadUrl}}",
        "options": {
          "response": {
            "response": {
              "responseFormat": "file"
            }
          }
        }
      },
      "id": "http-2",
      "name": "Download PowerPoint File",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 3,
      "position": [1340, 300]
    },
    {
      "parameters": {
        "functionCode": "// Perform post-export quality validation\nconst session = $input.first().json;\nconst fileData = $input.first().binary.data;\n\n// Simulate file quality checks (in real implementation, this would analyze the actual PPTX)\nconst qualityChecks = {\n  fileStructure: { passed: true, details: 'Valid PPTX format detected' },\n  fileSize: { passed: true, size: '2.3MB', details: 'Within acceptable range' },\n  slideCount: { passed: true, count: 12, details: 'Matches expected slide count' },\n  fontEmbedding: { passed: true, details: 'Standard fonts properly embedded' },\n  imageQuality: { passed: true, details: 'High-resolution images maintained' },\n  layoutIntegrity: { passed: true, details: 'Slide layouts preserved' }\n};\n\nconst allChecksPassed = Object.values(qualityChecks).every(check => check.passed);\nconst finalQualityScore = allChecksPassed ? Math.min(100, session.qualityPercentage + 10) : session.qualityPercentage;\n\n// Generate quality report\nconst qualityReport = {\n  sessionId: session.sessionId,\n  originalScore: session.qualityPercentage,\n  finalScore: finalQualityScore,\n  improvement: finalQualityScore - session.qualityPercentage,\n  checks: qualityChecks,\n  overallStatus: allChecksPassed ? 'success' : 'needs_review',\n  recommendations: allChecksPassed ? [] : ['Review layout inconsistencies', 'Check font rendering', 'Verify image placement']\n};\n\nreturn [{\n  json: {\n    ...session,\n    qualityChecks,\n    qualityReport,\n    finalQualityScore,\n    status: allChecksPassed ? 'completed' : 'needs_review',\n    completed: new Date().toISOString()\n  }\n}];"
      },
      "id": "code-4",
      "name": "Post-Export Quality Validation",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [1560, 300]
    },
    {
      "parameters": {
        "operation": "upload",
        "fileId": "={{$json.fileId}}",
        "fileName": "={{$json.sessionId}}_export.pptx",
        "options": {}
      },
      "id": "google-drive-1",
      "name": "Save to Google Drive",
      "type": "n8n-nodes-base.googleDrive",
      "typeVersion": 2,
      "position": [1780, 300]
    },
    {
      "parameters": {
        "fromEmail": "noreply@gamma-automation.com",
        "toEmail": "={{$json.userEmail}}",
        "subject": "PowerPoint Export Complete - {{ $json.status === 'completed' ? 'Success' : 'Review Required' }}",
        "emailType": "html",
        "message": "<h2>Gamma PowerPoint Export Results</h2><p><strong>Session ID:</strong> {{ $json.sessionId }}</p><p><strong>Status:</strong> {{ $json.status }}</p><p><strong>Quality Score:</strong> {{ $json.finalQualityScore }}/100</p><p><strong>Download:</strong> <a href=\"{{ $json.downloadUrl }}\">Click here to download your PowerPoint file</a></p>{{ $json.status === 'needs_review' ? '<p><strong>Note:</strong> Some quality issues were detected. Please review the exported file.</p>' : '' }}<p>Thank you for using Gamma Export Automation!</p>",
        "options": {
          "allowUnauthorizedCerts": true
        }
      },
      "id": "email-1",
      "name": "Send Notification Email",
      "type": "n8n-nodes-base.emailSend",
      "typeVersion": 2,
      "position": [2000, 300]
    },
    {
      "parameters": {
        "url": "={{$json.webhookUrl || 'https://hooks.slack.com/services/YOUR/SLACK/WEBHOOK'}}",
        "httpMethod": "POST",
        "postBody": {
          "text": "Gamma PowerPoint Export {{ $json.status === 'completed' ? '✅ Completed' : '⚠️ Needs Review' }}",
          "attachments": [
            {
              "color": "{{ $json.status === 'completed' ? 'good' : 'warning' }}",
              "fields": [
                {
                  "title": "Session ID",
                  "value": "{{ $json.sessionId }}",
                  "short": true
                },
                {
                  "title": "Quality Score",
                  "value": "{{ $json.finalQualityScore }}/100",
                  "short": true
                },
                {
                  "title": "User",
                  "value": "{{ $json.userEmail }}",
                  "short": true
                },
                {
                  "title": "Processing Time",
                  "value": "{{ Math.round((new Date($json.completed) - new Date($json.processingStarted)) / 1000) }}s",
                  "short": true
                }
              ]
            }
          ]
        }
      },
      "id": "slack-1",
      "name": "Send Slack Notification",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 3,
      "position": [2220, 300]
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={{ {\n  sessionId: $json.sessionId,\n  status: $json.status,\n  qualityScore: $json.finalQualityScore,\n  downloadUrl: $json.downloadUrl,\n  message: $json.status === 'completed' ? 'PowerPoint export completed successfully!' : 'Export completed with quality warnings - please review the file.',\n  timestamp: new Date().toISOString()\n} }}"
      },
      "id": "response-1",
      "name": "Send Response",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [2440, 300]
    }
  ],
  "connections": {
    "Gamma Export Trigger": {
      "main": [
        [
          {
            "node": "Validate Export Request",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Validate Export Request": {
      "main": [
        [
          {
            "node": "Quality Analysis",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Quality Analysis": {
      "main": [
        [
          {
            "node": "Generate PowerPoint via API",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Generate PowerPoint via API": {
      "main": [
        [
          {
            "node": "Process API Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Process API Response": {
      "main": [
        [
          {
            "node": "Download PowerPoint File",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Download PowerPoint File": {
      "main": [
        [
          {
            "node": "Post-Export Quality Validation",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Post-Export Quality Validation": {
      "main": [
        [
          {
            "node": "Save to Google Drive",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Save to Google Drive": {
      "main": [
        [
          {
            "node": "Send Notification Email",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Send Notification Email": {
      "main": [
        [
          {
            "node": "Send Slack Notification",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Send Slack Notification": {
      "main": [
        [
          {
            "node": "Send Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "pinData": {},
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": null,
  "tags": [
    {
      "createdAt": "2025-01-07T00:00:00.000Z",
      "updatedAt": "2025-01-07T00:00:00.000Z",
      "id": "gamma-automation",
      "name": "Gamma Automation"
    },
    {
      "createdAt": "2025-01-07T00:00:00.000Z",
      "updatedAt": "2025-01-07T00:00:00.000Z",
      "id": "powerpoint-export",
      "name": "PowerPoint Export"
    }
  ],
  "triggerCount": 1,
  "updatedAt": "2025-01-07T00:00:00.000Z",
  "versionId": "1"
}